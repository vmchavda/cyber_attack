{"name": "test_case2", "status": "failed", "statusDetails": {"message": "AssertionError: \n+----------------------+-----------+---------------------+---------------------+\n|      expression      | condition |    current value    |      expected       |\n+======================+===========+=====================+=====================+\n| assert name_sorted   | ==        | ['Man in the        | ['Man in the        |\n| == names             |           | Middle', 'Password  | Middle', 'Password  |\n|                      |           | attack',            | attack',            |\n|                      |           | 'Phishing', 'SQL    | 'Phishing',         |\n|                      |           | Injection',         | 'Session hijack',   |\n|                      |           | 'Session hijack',   | 'SQL Injection',    |\n|                      |           | 'XSS']              | 'XSS']              |\n+----------------------+-----------+---------------------+---------------------+", "trace": "self = <TestCases.test_validation.TestValidation object at 0x000002752BE9A430>\n\n    import logging\n    from time import sleep\n    import pytest\n    from Pages.cyber_attack_page import CyberAttackPage\n    \n    \n    @pytest.mark.usefixtures(\"setup\")\n    class TestValidation:\n    \n        def test_case1(self):\n    \n            cyber_attack_page=CyberAttackPage()\n            logging.info(\"navigating to cyber attack page\")\n    \n            #sorting name\n            filter_names=['Xss','phishing','session','injection','attack']\n            for name in filter_names:\n                cyber_attack_page.filter_data.set_text(name)\n                list=cyber_attack_page.names.get_all_elements()\n                logging.info(\"finding text {}\".format(str(list)))\n                names=[i.text for i in list]\n                logging.info(\"names text {}\".format(str(names)))\n                assert name.lower() in str(names).lower(),'{} not present'.format(name)\n                sleep(1)\n    \n            #sorting data\n            all_data = []\n            sleep(2)\n            list = cyber_attack_page.rows.get_all_elements()\n            comp={'low':1,'medium':2,'high':3}\n            for li in range(len(list)):\n                temp={}\n                temp['Name']=cyber_attack_page.get_name(li+1).text\n    \n                t=cyber_attack_page.get_no_of_cases(li+1).text\n                temp['Number of cases']=cyber_attack_page.convert_value(t)\n                temp['Impact score']=float(cyber_attack_page.get_avg_impact_score(li+1).text)\n    \n                temp['Complexity']=comp[cyber_attack_page.get_complexity(li+1).text]\n                logging.info(\"name {}\".format(str(temp)))\n                all_data.append(temp)\n            logging.info(\"all_data {}\".format(str(all_data)))\n    \n            def get_name(all_data):\n                return all_data.get('Name')\n            def get_cases(all_data):\n                return all_data.get('Number of cases')\n            def get_score(all_data):\n                return all_data.get('Impact score')\n            def get_complex(all_data):\n                return all_data.get('Complexity')\n            name_sort=all_data.copy()\n            name_sort.sort(key=get_name)\n            logging.info(\"get_name all_data {}\".format(str(name_sort)))\n    \n            all_data.sort(key=get_complex)\n            logging.info(\"get_complex all_data {}\".format(str(all_data)))\n    \n            all_data.sort(key=get_score)\n            logging.info(\"get_score all_data {}\".format(str(all_data)))\n    \n            all_data.sort(key=get_cases)\n            logging.info(\"get_cases all_data {}\".format(str(all_data)))\n            # end of sorting\n    \n    \n            sort_data = ['Name','Number of cases', 'Impact score','Complexity']\n            for name in sort_data:\n                sleep(2)\n                list = cyber_attack_page.names.get_all_elements()\n                beforesort = [i.text for i in list]\n                logging.info(\"sorted name {}\".format(str(beforesort)))\n                cyber_attack_page.get_sort_data(name)\n                sleep(2)\n                if 'Name' == name:\n                    list = cyber_attack_page.names.get_all_elements()\n                    names = [i.text for i in list]\n                    logging.info(\"finding text {}\".format(str(names)))\n                    name_sort.sort(key=get_name)\n                    name_sorted = [x[name] for x in name_sort]\n    \n                if 'Number of cases' == name:\n                    list = cyber_attack_page.no_of_cases.get_all_elements()\n                    names = [i.text for i in list]\n                    names=[cyber_attack_page.convert_value(case) for case in names]\n>                   logging.info(\"finding text {}\".format(str(names)))\n\nTestCases\\test_validation.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = SoftAssertions(assertions=[Assert(code='(name_sorted == names)\\n', result=False, left=['Man in the Middle', 'Password ...sert(code='(name_sorted == names)\\n', result=True, left=[1, 1, 1, 2, 3, 3], right=[1, 1, 1, 2, 3, 3], condition='==')])\nexc_type = None, exc_val = None, exc_tb = None\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if self.is_failed:\n>           raise AssertionError(f'\\n{self.draw_results()}')\nE           AssertionError: \nE           +----------------------+-----------+---------------------+---------------------+\nE           |      expression      | condition |    current value    |      expected       |\nE           +======================+===========+=====================+=====================+\nE           | assert name_sorted   | ==        | ['Man in the        | ['Man in the        |\nE           | == names             |           | Middle', 'Password  | Middle', 'Password  |\nE           |                      |           | attack',            | attack',            |\nE           |                      |           | 'Phishing', 'SQL    | 'Phishing',         |\nE           |                      |           | Injection',         | 'Session hijack',   |\nE           |                      |           | 'Session hijack',   | 'SQL Injection',    |\nE           |                      |           | 'XSS']              | 'XSS']              |\nE           +----------------------+-----------+---------------------+---------------------+\n\n..\\backendpython\\venv\\lib\\site-packages\\pytest_soft_asserts\\libassert\\lib.py:19: AssertionError"}, "attachments": [{"name": "log", "source": "cef86f88-5cee-48f7-af4c-1b61e8087903-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "d3eadfc9-fc6e-49dd-a407-e17ee26d1e69-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "bea96ea0-5edb-43af-9b27-610b1df8b171-attachment.txt", "type": "text/plain"}], "start": 1646628801815, "stop": 1646628828454, "uuid": "ab8b81a4-a84a-4a43-8999-586991ff0d32", "historyId": "d4e92721e9c80819561f9a21dd94e863", "testCaseId": "63f150904c9ed716fa77fbdcbcddcc4e", "fullName": "TestCases.test_validation.TestValidation#test_case2", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "TestCases"}, {"name": "suite", "value": "test_validation"}, {"name": "subSuite", "value": "TestValidation"}, {"name": "host", "value": "DESKTOP-T932SRR"}, {"name": "thread", "value": "12764-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.test_validation"}]}